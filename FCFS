//Anne Genevieve Telcy 
// FCFS main file CPU 

#include <iostream>
#include <string>
#include <list>
#include "Header.h"

using namespace std;

//***********************Processes********
const int PROC = 8;

// Function prototypes 
void startProcesses(Process[]); 
void initJobQueue(Process[], list<Process>&);
void load_readyQueue(list<Process>&, list<Process>&);
void updateProcesses(int);
bool processes_done(list<Process>&, list<Process>&);

void FinalReport(list<Process>&, int, int);
void ContextSwitch(list<Process>&, list<Process>&, list<Process>&, int );

int main() 
{
	

	Process proc[PROC];
	list<Process> jobQueue;
	list<Process> readyQueue;
	list<Process> ioQueue;
	list<Process> doneQueue;
	list<Process>::iterator itrIOQ = ioQueue.begin();

	startProcesses(proc);
	initJobQueue(proc, jobQueue);
	load_readyQueue(jobQueue, readyQueue);					// Start processes

	int time = 0;
	int cpuTime = 0;
	int ioTime = 0;

	// *** CPU loop****
	

	ContextSwitch(readyQueue, ioQueue, doneQueue, time); // switching from CPU Burst to IO)

	while (!processes_done(readyQueue, ioQueue))
	{

		//  Start New Process
		if (!readyQueue.empty() && readyQueue.front().newState == true)
		{
			readyQueue.front().newState = false;
			readyQueue.front().startTime = time;

			cout << "Process P" << readyQueue.front().procID << " starting, ";
			ContextSwitch(readyQueue, ioQueue, doneQueue, time);
		}
		
		//  Run Process
		if (!readyQueue.empty())		// if in ready queue 
		{
			
			if (readyQueue.front().bursts.front())
			{
				--readyQueue.front().bursts.front();	

				if (readyQueue.front().bursts.front() == 0
					&& readyQueue.front().bursts.size() == 1)	// Last CPU burst, send to done queue
				{
					cout << "Process P" << readyQueue.front().procID << " is finished, ";
					readyQueue.front().endTime = time;
					readyQueue.front().bursts.pop();
					readyQueue.front().processMode = 3;

					doneQueue.push_back(readyQueue.front());

					readyQueue.pop_front();	

					if (readyQueue.empty())
						readyQueue.clear();

					ContextSwitch(readyQueue, ioQueue, doneQueue, time);
				}
				else if (readyQueue.front().bursts.front() == 0)	// Process needs I/O device data, send to I/O queue
				{
					cout << "Process P" << readyQueue.front().procID << " needs I/O, ";
					readyQueue.front().bursts.pop();				// Delete CPU burst from process' burst queue
					readyQueue.front().processMode = 1;				// Switch process mode to I/O


					ioQueue.push_back(readyQueue.front());		// Send to I/O queue
					readyQueue.pop_front();

					ContextSwitch(readyQueue, ioQueue, doneQueue, time);
				}
				if (!readyQueue.empty())
				{
					readyQueue.front().runTime++;

					for (list<Process>::iterator iReady = ++readyQueue.begin(); iReady != readyQueue.end(); iReady++)
						iReady->waitTime++;
				}
				cpuTime++;
			}
		}

		// State: I/O wait/receive
		if (!ioQueue.empty())			// State: Run I/O
		{
			
				itrIOQ = ioQueue.begin();

				while (itrIOQ != ioQueue.end())
				
				{
					--itrIOQ->bursts.front();

					if (itrIOQ->bursts.front() == 0)	// I/O done, send back to ready queue
					{
						cout << "Process P" << itrIOQ->procID << " returning to cpu ready state, ";
						itrIOQ->bursts.pop();
						itrIOQ->processMode = 0;

						//if (!readyQ.empty() && itrIOQ != ioQ.end()) {
						readyQueue.push_back(*itrIOQ);
						itrIOQ = ioQueue.erase(itrIOQ);

						ContextSwitch(readyQueue, ioQueue, doneQueue, time);
					}
					else
						++itrIOQ;
				}

				for (list<Process>::iterator iIO = ioQueue.begin(); iIO != ioQueue.end(); iIO++)
					iIO->ioTime++;
				ioTime++;
	
		}
		time++;
		
	}

	FinalReport(doneQueue, time, cpuTime);
	return 0;
}

// *************************
//***********************************************************************************//
void startProcesses(Process p[]) {
	int P1[] = { 5,27,3,31,5,43,4,18,6,22,4,26, 3,24, 5 };
	p[0].setProcTimes(P1, 15, 1);
	int P2[] = { 4,48,5,44,7,42,12,37,9,76,4,41,9,31,7,43, 8 };	
	p[1].setProcTimes(P2, 17, 2);
	int P3[] = { 8, 33, 12, 41, 18, 65, 14, 21, 4, 61, 15, 18, 14, 26, 5, 31, 6 };
	p[2].setProcTimes(P3, 17, 3);
	int P4[] = { 3, 35, 4, 41, 5, 45, 3, 51, 4, 61, 5, 54, 6, 82, 5, 77, 3 };		
	p[3].setProcTimes(P4, 17, 4);
	int P5[] = { 16, 24, 17, 21, 5, 36, 16, 26, 7, 31, 13, 28, 11, 21, 6, 13, 3, 11, 4 };
	p[4].setProcTimes(P5, 19, 5);
	int P6[] = { 11, 22, 4, 8, 5, 10, 6, 12, 7, 14, 9, 18, 12, 24, 15, 30, 8
  };				
	p[5].setProcTimes(P6, 17, 6);
	int P7[] = { 14, 46, 17, 41, 11, 42, 15, 21, 4, 32, 7, 19, 16, 33, 10 };	
	p[6].setProcTimes(P7, 15, 7);
	int P8[] = { 4, 14, 5, 33, 6, 51, 14, 73, 16, 87, 6 };	
	p[7].setProcTimes(P8, 11, 8);
}

//Inserting all processes into the vector/list 
void initJobQueue(Process p[], list<Process>& jobQueue) {

	for (int i = 0; i < PROC; i++)
		jobQueue.push_back(p[i]);
}

void load_readyQueue(list<Process>& jobQueue, list<Process>& readyQueue) {

	if (!jobQueue.empty()) {

		for (list<Process>::iterator iter = jobQueue.begin(); iter != jobQueue.end(); iter++) {
			readyQueue.push_back(*iter);
		}
	}
}

void updateProcesses(int cpuTime)
{


}

/// Check that there are no more active processes in the Ready and I/O queues
bool processes_done(list<Process>& readyQueue, list<Process>& ioQueue) {
	if (readyQueue.empty() && ioQueue.empty())
		{return true;}
	else								
		{return false;}

	return true;
}

//********* Calculations **************

void FinalReport(list<Process>& lp, int totalTime, int cpuTime)
{
	cout << "\n\n FCFS: Final Report for CPU Scheduler\n\n";

	cout << "Total Run Time: " << totalTime << "\n\n";


	float cpuUtil = 0.0;
	cpuUtil = cpuTime / totalTime;

	// CPU utilization
	cout << "CPU Utilization: " << cpuUtil << "\n\n";
		// sum of actual work time / total time		

	cout << "Wait Times: \n" ;		// time spent waiting in ready state

	float waitTotal = 0.0;
	for (list<Process>::iterator i = lp.begin(); i != lp.end(); i++)
	{
		cout << "P" << i->procID << " waittime: " << i->waitTime << endl;
		waitTotal += i->waitTime;
	}

	cout << "Wait Time Avg (Tw): " << waitTotal / 8 << "\n\n";


	cout << "Turnaround Times: \n";

	int turnTotal = 0;
	for (list<Process>::iterator i = lp.begin(); i != lp.end(); i++)
	{

	}
	cout << "Turnaround Avg: " << turnTotal / 8 << "\n\n";





	cout << "Response Times: \n";

	float respTotal = 0;
	for (list<Process>::iterator i = lp.begin(); i != lp.end(); i++)
	{
		cout << "P" << i->procID << ": " << i->startTime <<endl;
		respTotal += i->startTime;
	}
	cout << "Response Avg: " << respTotal / 8 << "\n\n";




}


void ContextSwitch(list<Process> &readyL, list<Process> &ioL, list<Process> &dne, int cpuRunTime) {
	cout << "Execution Time: " << cpuRunTime << "                                 >>>>>>>>>>" << endl;
	cout << "-------------------------------\n"
		<< "Process\tCPU Burst\tI/O Burst\tState\n";

	if (!readyL.empty())
	{
		cout << "<<Ready List>>\n";
		for (list<Process>::iterator iRL = readyL.begin(); iRL != readyL.end(); iRL++)
		{
			cout << "P" << iRL->procID << "\t" << iRL->bursts.front() << "\t\t\t\t";

			if (iRL->processMode == 0)
				cout << "Processing";
			else if (iRL->processMode == 1 || iRL->processMode == 2 )
				cout << "Waiting";

			cout << endl;
		}
	}

	if (!ioL.empty())
	{
		cout << "\n<<I/O List>>\n";
		for (list<Process>::iterator iIOL = ioL.begin(); iIOL != ioL.end(); iIOL++)
		{
			cout << "P" << iIOL->procID << "\t\t\t" << iIOL->bursts.front();

			if (iIOL->processMode == 1)
				cout << "\t\tI/O Wait";

			cout << endl;
		}
	}

	if (!dne.empty())
	cout << "\n<<Done List>>\n";
	for (list<Process>::iterator iDone = dne.begin(); iDone != dne.end(); iDone++)
	{
		cout << "P" << iDone->procID << "\t\t\t\t\t" ;

		if (iDone->processMode == 3)
			cout << "Done";

		cout << endl;
	}
  
	cout<< endl;
}
